% 19-40158-1 DEBORAJ ROY

fs = 1000; 
t = 0:1/fs:1-1/fs; 
f1 = 12; 
f2 = 6; 
A1 = 1.5;
A2 = 1.1;
x1 = A1*sin(2*pi*f1*t);
x2 = A2*sin(2*pi*f2*t); 
plot(t,x1,'k--o','LineWidth',1.5)
hold on
plot(t,x2,'b-*','LineWidth',2)
hold off
xlabel('time in seconds')
ylabel('Amplitude in volts')
title('Signals of different Frequencies')



fx1 = fft(x1);
fx2 = fft(x2);
fx1 = fftshift(fx1)/(fs/2);
fx2 = fftshift(fx2)/(fs/2);
f = fs/2*linspace(-1,1,fs);

plot(f, abs(fx1), f, abs(fx2),'LineWidth',1.5);
title('magnitude FFT of sine');
axis([-100 100 0 2])
xlabel('Frequency (Hz)');
ylabel('magnitude');

------------------------------------------------------------------------------------------------
fs = 8000; 
 t = 0:1/fs:1-1/fs; 
 cx = 1.1*sin(2*pi*100*t) + 1.3*cos(2*pi*300*t) + 1.5*sin(2*pi*2000*t); 
 bandwidth = 2000-100


----------------------------------------------------------------------------------------------------------------------------



fs = 8000;
f = 400; %Hz
%Define signal
t = 0:1/fs:1-1/fs;
signal = 1.2*sin(2*pi*f*t);
%Plot to illustrate that it is a sine wave 
plot(t, signal);
title('Time-Domain signal');
xlabel('Time (s)');
ylabel('amplitude');
%Take fourier transform
fftSignal = fft(signal);
%apply fftshift to put it in the form we are used to (see documentation)
fftSignal = fftshift(fftSignal)/(fs/2);%scaling done by dividing with (fs/2)
%Next, calculate the frequency axis, which is defined by the sampling rate
f = fs/2*linspace(-1,1,fs);
%Since the signal is complex, we need to plot the magnitude to get it to
%look right, so we use abs (absolute value)
figure;
plot(f, abs(fftSignal));
title('magnitude FFT of sine');
xlabel('Frequency (Hz)');
ylabel('magnitude');
%noise
noise = 2*randn(size(signal));
figure
plot(t,noise)
xlabel('Time (s)');
ylabel('Amplitude');
title('Time-Domain Noise');
fftNoise = fft(noise);
fftNoise = fftshift(fftNoise)/(fs/2);
figure
plot(f,abs(fftNoise))
title('Magnitude FFT of noise');
xlabel('Frequency (Hz)');
ylabel('magnitude');
%noisy signal
noisySignal = signal + noise;
figure
plot(t,noisySignal)
xlabel('Time (s)');
ylabel('Amplitude');
title('Time-Domain Noisy Signal');
fftNoisySignal = fft(noisySignal);
fftNoisySignal = fftshift(fftNoisySignal)/(fs/2);
figure
plot(f,abs(fftNoisySignal))
title('Magnitude FFT of noisy signal');
xlabel('Frequency (Hz)');
ylabel('magnitude');


------------------------------------------------------------------------------------------------------------------------------
fs = 10000;
t = [0:1/fs:0.1];
f = 10;
sig = 2*sin(2*pi*f*t); 
partition = [-1.5, -0.5, 0.5, 1.5]; 
codebook = [-2:2];
[index,quants] = quantiz(sig,partition,codebook);
figure
plot(t,sig,'x',t,quants,'.')
legend('Original signal','Quantized signal');


_________________________________________________________________________________________________________________________________________



% 19-40158-1 DEBORAJ ROY

fs = 1000; 
t = 0:1/fs:1-1/fs; 
f1 = 12; 
f2 = 6; 
A1 = 1.5;
A2 = 1.1;
x1 = A1*sin(2*pi*f1*t);
x2 = A2*sin(2*pi*f2*t); 
plot(t,x1,'k--o','LineWidth',1.5)
hold on
plot(t,x2,'b-*','LineWidth',2)
hold off
xlabel('time in seconds')
ylabel('Amplitude in volts')
title('Signals of different Frequencies')



fx1 = fft(x1);
fx2 = fft(x2);
fx1 = fftshift(fx1)/(fs/2);
fx2 = fftshift(fx2)/(fs/2);
f = fs/2*linspace(-1,1,fs);

plot(f, abs(fx1), f, abs(fx2),'LineWidth',1.5);
title('magnitude FFT of sine');
axis([-100 100 0 2])
xlabel('Frequency (Hz)');
ylabel('magnitude');

------------------------------------------------------------------------------------------------
fs = 8000; 
 t = 0:1/fs:1-1/fs; 
 cx = 1.1*sin(2*pi*100*t) + 1.3*cos(2*pi*300*t) + 1.5*sin(2*pi*2000*t); 
 bandwidth = 2000-100


----------------------------------------------------------------------------------------------------------------------------



fs = 8000;
f = 400; %Hz
%Define signal
t = 0:1/fs:1-1/fs;
signal = 1.2*sin(2*pi*f*t);
%Plot to illustrate that it is a sine wave 
plot(t, signal);
title('Time-Domain signal');
xlabel('Time (s)');
ylabel('amplitude');
%Take fourier transform
fftSignal = fft(signal);
%apply fftshift to put it in the form we are used to (see documentation)
fftSignal = fftshift(fftSignal)/(fs/2);%scaling done by dividing with (fs/2)
%Next, calculate the frequency axis, which is defined by the sampling rate
f = fs/2*linspace(-1,1,fs);
%Since the signal is complex, we need to plot the magnitude to get it to
%look right, so we use abs (absolute value)
figure;
plot(f, abs(fftSignal));
title('magnitude FFT of sine');
xlabel('Frequency (Hz)');
ylabel('magnitude');
%noise
noise = 2*randn(size(signal));
figure
plot(t,noise)
xlabel('Time (s)');
ylabel('Amplitude');
title('Time-Domain Noise');
fftNoise = fft(noise);
fftNoise = fftshift(fftNoise)/(fs/2);
figure
plot(f,abs(fftNoise))
title('Magnitude FFT of noise');
xlabel('Frequency (Hz)');
ylabel('magnitude');
%noisy signal
noisySignal = signal + noise;
figure
plot(t,noisySignal)
xlabel('Time (s)');
ylabel('Amplitude');
title('Time-Domain Noisy Signal');
fftNoisySignal = fft(noisySignal);
fftNoisySignal = fftshift(fftNoisySignal)/(fs/2);
figure
plot(f,abs(fftNoisySignal))
title('Magnitude FFT of noisy signal');
xlabel('Frequency (Hz)');
ylabel('magnitude');


_____________________________________________________________________________________________________________________________
